c3724d5bab00381c422349490a38459f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _ViewNativeComponent = _interopRequireDefault(require("./ViewNativeComponent"));
var _TextAncestor = _interopRequireDefault(require("../../Text/TextAncestor"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var View = React.forwardRef(function (props, forwardedRef) {
  return (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
    value: false,
    children: (0, _jsxRuntime.jsx)(_ViewNativeComponent.default, Object.assign({}, props, {
      ref: forwardedRef
    }))
  });
});
View.displayName = 'View';
module.exports = View;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlld05hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1RleHRBbmNlc3RvciIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJWaWV3IiwiZm9yd2FyZFJlZiIsInByb3BzIiwiZm9yd2FyZGVkUmVmIiwianN4IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImNoaWxkcmVuIiwiYXNzaWduIiwicmVmIiwiZGlzcGxheU5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiVmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKi9cblxuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi9WaWV3UHJvcFR5cGVzJztcblxuaW1wb3J0IFZpZXdOYXRpdmVDb21wb25lbnQgZnJvbSAnLi9WaWV3TmF0aXZlQ29tcG9uZW50JztcbmltcG9ydCBUZXh0QW5jZXN0b3IgZnJvbSAnLi4vLi4vVGV4dC9UZXh0QW5jZXN0b3InO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBQcm9wcyA9IFZpZXdQcm9wcztcblxuLyoqXG4gKiBUaGUgbW9zdCBmdW5kYW1lbnRhbCBjb21wb25lbnQgZm9yIGJ1aWxkaW5nIGEgVUksIFZpZXcgaXMgYSBjb250YWluZXIgdGhhdFxuICogc3VwcG9ydHMgbGF5b3V0IHdpdGggZmxleGJveCwgc3R5bGUsIHNvbWUgdG91Y2ggaGFuZGxpbmcsIGFuZCBhY2Nlc3NpYmlsaXR5XG4gKiBjb250cm9scy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlld1xuICovXG5jb25zdCBWaWV3OiBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgVmlld1Byb3BzLFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3TmF0aXZlQ29tcG9uZW50Pixcbj4gPSBSZWFjdC5mb3J3YXJkUmVmKChwcm9wczogVmlld1Byb3BzLCBmb3J3YXJkZWRSZWYpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8VGV4dEFuY2VzdG9yLlByb3ZpZGVyIHZhbHVlPXtmYWxzZX0+XG4gICAgICA8Vmlld05hdGl2ZUNvbXBvbmVudCB7Li4ucHJvcHN9IHJlZj17Zm9yd2FyZGVkUmVmfSAvPlxuICAgIDwvVGV4dEFuY2VzdG9yLlByb3ZpZGVyPlxuICApO1xufSk7XG5cblZpZXcuZGlzcGxheU5hbWUgPSAnVmlldyc7XG5cbm1vZHVsZS5leHBvcnRzID0gVmlldztcbiJdLCJtYXBwaW5ncyI6IjtBQVlBLElBQUFBLG9CQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxhQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFDLHVCQUFBLENBQUFILE9BQUE7QUFBK0IsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsU0FBQUsseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFILHdCQUFBTyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFXL0IsSUFBTVcsSUFHTCxHQUFHekIsS0FBSyxDQUFDMEIsVUFBVSxDQUFDLFVBQUNDLEtBQWdCLEVBQUVDLFlBQVksRUFBSztFQUN2RCxPQUNFLElBQUExQixXQUFBLENBQUEyQixHQUFBLEVBQUM5QixhQUFBLENBQUFXLE9BQVksQ0FBQ29CLFFBQVE7SUFBQ0MsS0FBSyxFQUFFLEtBQU07SUFBQUMsUUFBQSxFQUNsQyxJQUFBOUIsV0FBQSxDQUFBMkIsR0FBQSxFQUFDakMsb0JBQUEsQ0FBQWMsT0FBbUIsRUFBQU0sTUFBQSxDQUFBaUIsTUFBQSxLQUFLTixLQUFLO01BQUVPLEdBQUcsRUFBRU47SUFBYTtFQUFHLEVBQy9CO0FBRTVCLENBQUMsQ0FBQztBQUVGSCxJQUFJLENBQUNVLFdBQVcsR0FBRyxNQUFNO0FBRXpCQyxNQUFNLENBQUNDLE9BQU8sR0FBR1osSUFBSSJ9