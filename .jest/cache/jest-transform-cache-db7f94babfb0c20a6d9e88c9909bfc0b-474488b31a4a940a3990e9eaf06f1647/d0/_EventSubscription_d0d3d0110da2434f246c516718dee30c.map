{"version":3,"names":["_interopRequireDefault","require","_classCallCheck2","_createClass2","_EventSubscription","subscriber","default","key","value","remove","removeSubscription","module","exports"],"sources":["_EventSubscription.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport {type EventSubscription} from './EventSubscription';\nimport type EventSubscriptionVendor from './_EventSubscriptionVendor';\n\n/**\n * EventSubscription represents a subscription to a particular event. It can\n * remove its own subscription.\n */\nclass _EventSubscription<EventDefinitions: {...}, K: $Keys<EventDefinitions>>\n  implements EventSubscription\n{\n  eventType: K;\n  key: number;\n  subscriber: EventSubscriptionVendor<EventDefinitions>;\n  listener: ?(...$ElementType<EventDefinitions, K>) => mixed;\n  context: ?$FlowFixMe;\n\n  /**\n   * @param {EventSubscriptionVendor} subscriber the subscriber that controls\n   *   this subscription.\n   */\n  constructor(subscriber: EventSubscriptionVendor<EventDefinitions>) {\n    this.subscriber = subscriber;\n  }\n\n  /**\n   * Removes this subscription from the subscriber that controls it.\n   */\n  remove(): void {\n    this.subscriber.removeSubscription(this);\n  }\n}\n\nmodule.exports = _EventSubscription;\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,sBAAA,GAAAC,OAAA;AAAA,IAAAC,gBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAA,IAAAE,aAAA,GAAAH,sBAAA,CAAAC,OAAA;AAAA,IASPG,kBAAkB;EAatB,SAAAA,mBAAYC,UAAqD,EAAE;IAAA,IAAAH,gBAAA,CAAAI,OAAA,QAAAF,kBAAA;IACjE,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAAC,IAAAF,aAAA,CAAAG,OAAA,EAAAF,kBAAA;IAAAG,GAAA;IAAAC,KAAA,EAKD,SAAAC,OAAA,EAAe;MACb,IAAI,CAACJ,UAAU,CAACK,kBAAkB,CAAC,IAAI,CAAC;IAC1C;EAAC;EAAA,OAAAN,kBAAA;AAAA;AAGHO,MAAM,CAACC,OAAO,GAAGR,kBAAkB"}