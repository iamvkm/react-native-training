e5b73e8daa96b068db68cf324dd7e6ed
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireDefault(require("react"));
var _hooks = require("../../../../../redux/hooks");
var _colors = _interopRequireDefault(require("../../../../../constants/colors"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_251ys1jxfh() {
  var path = "D:\\NativeApp\\src\\screens\\Profile\\ProfileMenu\\TodoList\\TodoTabs\\CompletedTab.tsx";
  var hash = "7ffa5db51789b403df56202b97db4ae358a074d7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\NativeApp\\src\\screens\\Profile\\ProfileMenu\\TodoList\\TodoTabs\\CompletedTab.tsx",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "1": {
        start: {
          line: 10,
          column: 27
        },
        end: {
          line: 10,
          column: 70
        }
      },
      "2": {
        start: {
          line: 10,
          column: 58
        },
        end: {
          line: 10,
          column: 69
        }
      },
      "3": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "5": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "6": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 32,
          column: 4
        }
      },
      "7": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 56,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 21
          },
          end: {
            line: 8,
            column: 22
          }
        },
        loc: {
          start: {
            line: 8,
            column: 27
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 42
          },
          end: {
            line: 10,
            column: 43
          }
        },
        loc: {
          start: {
            line: 10,
            column: 58
          },
          end: {
            line: 10,
            column: 69
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 58
          },
          end: {
            line: 20,
            column: 3
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7ffa5db51789b403df56202b97db4ae358a074d7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_251ys1jxfh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_251ys1jxfh();
cov_251ys1jxfh().s[0]++;
var CompletedTab = function CompletedTab() {
  cov_251ys1jxfh().f[0]++;
  var _ref = (cov_251ys1jxfh().s[1]++, (0, _hooks.useAppSelector)(function (state) {
      cov_251ys1jxfh().f[1]++;
      cov_251ys1jxfh().s[2]++;
      return state.todos;
    })),
    completedTodos = _ref.completedTodos;
  cov_251ys1jxfh().s[3]++;
  var renderTodoList = function renderTodoList(todoListProps) {
    cov_251ys1jxfh().f[2]++;
    var _ref2 = (cov_251ys1jxfh().s[4]++, todoListProps),
      todo = _ref2.item,
      index = _ref2.index;
    cov_251ys1jxfh().s[5]++;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: completedTabStyles.listContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: completedTabStyles.todoTitle,
        children: todo.title
      })
    }, index);
  };
  cov_251ys1jxfh().s[6]++;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: completedTodos,
      renderItem: renderTodoList,
      updateCellsBatchingPeriod: 5,
      style: {
        paddingVertical: 15
      },
      fadingEdgeLength: 50
    })
  });
};
var _default = CompletedTab;
exports.default = _default;
var completedTabStyles = (cov_251ys1jxfh().s[7]++, _reactNative.StyleSheet.create({
  statusText: {
    fontSize: 14,
    fontWeight: '500'
  },
  todoTitle: {
    fontSize: 16,
    fontWeight: '500'
  },
  listContainer: {
    padding: 10,
    marginVertical: 8,
    marginHorizontal: 15,
    borderColor: _colors.default.green,
    backgroundColor: _colors.default.white,
    borderRadius: 10,
    borderWidth: 2,
    elevation: 5
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,