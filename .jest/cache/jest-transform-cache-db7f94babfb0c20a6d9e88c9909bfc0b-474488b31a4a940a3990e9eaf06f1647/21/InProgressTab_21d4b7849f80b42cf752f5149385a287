723e18b038497bab7992d09c87b08d94
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireDefault(require("react"));
var _hooks = require("../../../../../redux/hooks");
var _colors = _interopRequireDefault(require("../../../../../constants/colors"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_r8set49qr() {
  var path = "D:\\NativeApp\\src\\screens\\Profile\\ProfileMenu\\TodoList\\TodoTabs\\InProgressTab.tsx";
  var hash = "4b90563ff934c42eca9fa54328512d2352ac24e1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\NativeApp\\src\\screens\\Profile\\ProfileMenu\\TodoList\\TodoTabs\\InProgressTab.tsx",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "1": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 10,
          column: 71
        }
      },
      "2": {
        start: {
          line: 10,
          column: 59
        },
        end: {
          line: 10,
          column: 70
        }
      },
      "3": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "5": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      "6": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 32,
          column: 4
        }
      },
      "7": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 56,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 22
          },
          end: {
            line: 8,
            column: 23
          }
        },
        loc: {
          start: {
            line: 8,
            column: 28
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 43
          },
          end: {
            line: 10,
            column: 44
          }
        },
        loc: {
          start: {
            line: 10,
            column: 59
          },
          end: {
            line: 10,
            column: 70
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 25
          },
          end: {
            line: 12,
            column: 26
          }
        },
        loc: {
          start: {
            line: 12,
            column: 58
          },
          end: {
            line: 20,
            column: 3
          }
        },
        line: 12
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4b90563ff934c42eca9fa54328512d2352ac24e1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_r8set49qr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_r8set49qr();
cov_r8set49qr().s[0]++;
var InProgressTab = function InProgressTab() {
  cov_r8set49qr().f[0]++;
  var _ref = (cov_r8set49qr().s[1]++, (0, _hooks.useAppSelector)(function (state) {
      cov_r8set49qr().f[1]++;
      cov_r8set49qr().s[2]++;
      return state.todos;
    })),
    inProgressTodos = _ref.inProgressTodos;
  cov_r8set49qr().s[3]++;
  var renderTodoList = function renderTodoList(todoListProps) {
    cov_r8set49qr().f[2]++;
    var _ref2 = (cov_r8set49qr().s[4]++, todoListProps),
      todo = _ref2.item,
      index = _ref2.index;
    cov_r8set49qr().s[5]++;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: inProgressTabStyles.listContainer,
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: inProgressTabStyles.todoTitle,
        children: todo.title
      })
    }, index);
  };
  cov_r8set49qr().s[6]++;
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: inProgressTodos,
      renderItem: renderTodoList,
      updateCellsBatchingPeriod: 5,
      style: {
        paddingVertical: 15
      },
      fadingEdgeLength: 50
    })
  });
};
var _default = InProgressTab;
exports.default = _default;
var inProgressTabStyles = (cov_r8set49qr().s[7]++, _reactNative.StyleSheet.create({
  statusText: {
    fontSize: 14,
    fontWeight: '500'
  },
  todoTitle: {
    fontSize: 16,
    fontWeight: '500'
  },
  listContainer: {
    padding: 10,
    marginVertical: 8,
    marginHorizontal: 15,
    borderColor: _colors.default.red,
    backgroundColor: _colors.default.white,
    borderRadius: 10,
    borderWidth: 2,
    elevation: 5
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,