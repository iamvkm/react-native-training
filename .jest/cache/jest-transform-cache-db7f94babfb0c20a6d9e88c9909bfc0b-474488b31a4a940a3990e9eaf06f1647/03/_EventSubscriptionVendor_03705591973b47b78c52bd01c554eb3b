9aa06416dd2344a209863025adca09e5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var invariant = require('invariant');
var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    (0, _classCallCheck2.default)(this, EventSubscriptionVendor);
    this._subscriptionsForType = {};
  }
  (0, _createClass2.default)(EventSubscriptionVendor, [{
    key: "addSubscription",
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: "removeAllSubscriptions",
    value: function removeAllSubscriptions(eventType) {
      if (eventType == null) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: "getSubscriptionsForType",
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();
module.exports = EventSubscriptionVendor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiaW52YXJpYW50IiwiRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IiLCJkZWZhdWx0IiwiX3N1YnNjcmlwdGlvbnNGb3JUeXBlIiwia2V5IiwidmFsdWUiLCJhZGRTdWJzY3JpcHRpb24iLCJldmVudFR5cGUiLCJzdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVyIiwibGVuZ3RoIiwicHVzaCIsInJlbW92ZUFsbFN1YnNjcmlwdGlvbnMiLCJyZW1vdmVTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb25zRm9yVHlwZSIsImdldFN1YnNjcmlwdGlvbnNGb3JUeXBlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIl9FdmVudFN1YnNjcmlwdGlvblZlbmRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuaW1wb3J0IHR5cGUgRXZlbnRTdWJzY3JpcHRpb24gZnJvbSAnLi9fRXZlbnRTdWJzY3JpcHRpb24nO1xuXG4vKipcbiAqIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIHN0b3JlcyBhIHNldCBvZiBFdmVudFN1YnNjcmlwdGlvbnMgdGhhdCBhcmVcbiAqIHN1YnNjcmliZWQgdG8gYSBwYXJ0aWN1bGFyIGV2ZW50IHR5cGUuXG4gKi9cbmNsYXNzIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yPEV2ZW50RGVmaW5pdGlvbnM6IHsuLi59PiB7XG4gIF9zdWJzY3JpcHRpb25zRm9yVHlwZToge1xuICAgIFt0eXBlOiAkS2V5czxFdmVudERlZmluaXRpb25zPl06IEFycmF5PFxuICAgICAgRXZlbnRTdWJzY3JpcHRpb248RXZlbnREZWZpbml0aW9ucywgJEZsb3dGaXhNZT4sXG4gICAgPixcbiAgICAuLi5cbiAgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZSA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBzdWJzY3JpcHRpb24ga2V5ZWQgYnkgYW4gZXZlbnQgdHlwZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcGFyYW0ge0V2ZW50U3Vic2NyaXB0aW9ufSBzdWJzY3JpcHRpb25cbiAgICovXG4gIGFkZFN1YnNjcmlwdGlvbjxLOiAkS2V5czxFdmVudERlZmluaXRpb25zPj4oXG4gICAgZXZlbnRUeXBlOiBLLFxuICAgIHN1YnNjcmlwdGlvbjogRXZlbnRTdWJzY3JpcHRpb248RXZlbnREZWZpbml0aW9ucywgSz4sXG4gICk6IEV2ZW50U3Vic2NyaXB0aW9uPEV2ZW50RGVmaW5pdGlvbnMsIEs+IHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBzdWJzY3JpcHRpb24uc3Vic2NyaWJlciA9PT0gdGhpcyxcbiAgICAgICdUaGUgc3Vic2NyaWJlciBvZiB0aGUgc3Vic2NyaXB0aW9uIGlzIGluY29ycmVjdGx5IHNldC4nLFxuICAgICk7XG4gICAgaWYgKCF0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdID0gW107XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0ubGVuZ3RoO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0ucHVzaChzdWJzY3JpcHRpb24pO1xuICAgIHN1YnNjcmlwdGlvbi5ldmVudFR5cGUgPSBldmVudFR5cGU7XG4gICAgc3Vic2NyaXB0aW9uLmtleSA9IGtleTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBidWxrIHNldCBvZiB0aGUgc3Vic2NyaXB0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBldmVudFR5cGUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBldmVudCB0eXBlIHdob3NlXG4gICAqICAgcmVnaXN0ZXJlZCBzdWJzY3JpcHRpb25zIHRvIHJlbW92ZSwgaWYgbnVsbCByZW1vdmUgYWxsIHN1YnNjcmlwdGlvbnMuXG4gICAqL1xuICByZW1vdmVBbGxTdWJzY3JpcHRpb25zPEs6ICRLZXlzPEV2ZW50RGVmaW5pdGlvbnM+PihldmVudFR5cGU6ID9LKTogdm9pZCB7XG4gICAgaWYgKGV2ZW50VHlwZSA9PSBudWxsKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi4gSW5zdGVhZCBvZiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIGNhbGxcbiAgICogYHN1YnNjcmlwdGlvbi5yZW1vdmUoKWAgZGlyZWN0bHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdWJzY3JpcHRpb25cbiAgICovXG4gIHJlbW92ZVN1YnNjcmlwdGlvbjxLOiAkS2V5czxFdmVudERlZmluaXRpb25zPj4oXG4gICAgc3Vic2NyaXB0aW9uOiBFdmVudFN1YnNjcmlwdGlvbjxFdmVudERlZmluaXRpb25zLCBLPixcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZXZlbnRUeXBlID0gc3Vic2NyaXB0aW9uLmV2ZW50VHlwZTtcbiAgICBjb25zdCBrZXkgPSBzdWJzY3JpcHRpb24ua2V5O1xuXG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICAgIGlmIChzdWJzY3JpcHRpb25zRm9yVHlwZSkge1xuICAgICAgZGVsZXRlIHN1YnNjcmlwdGlvbnNGb3JUeXBlW2tleV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGFycmF5IG9mIHN1YnNjcmlwdGlvbnMgdGhhdCBhcmUgY3VycmVudGx5IHJlZ2lzdGVyZWQgZm9yIHRoZVxuICAgKiBnaXZlbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGFycmF5IGNhbiBiZSBwb3RlbnRpYWxseSBzcGFyc2UgYXMgc3Vic2NyaXB0aW9ucyBhcmUgZGVsZXRlZFxuICAgKiBmcm9tIGl0IHdoZW4gdGhleSBhcmUgcmVtb3ZlZC5cbiAgICpcbiAgICogVE9ETzogVGhpcyByZXR1cm5zIGEgbnVsbGFibGUgYXJyYXkuIHdhdD9cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZVxuICAgKiBAcmV0dXJucyB7P2FycmF5fVxuICAgKi9cbiAgZ2V0U3Vic2NyaXB0aW9uc0ZvclR5cGU8SzogJEtleXM8RXZlbnREZWZpbml0aW9ucz4+KFxuICAgIGV2ZW50VHlwZTogSyxcbiAgKTogP0FycmF5PEV2ZW50U3Vic2NyaXB0aW9uPEV2ZW50RGVmaW5pdGlvbnMsIEs+PiB7XG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFN1YnNjcmlwdGlvblZlbmRvcjtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUViLElBQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFdBQVcsQ0FBQztBQUFDLElBUWpDSSx1QkFBdUI7RUFRM0IsU0FBQUEsd0JBQUEsRUFBYztJQUFBLElBQUFILGdCQUFBLENBQUFJLE9BQUEsUUFBQUQsdUJBQUE7SUFDWixJQUFJLENBQUNFLHFCQUFxQixHQUFHLENBQUMsQ0FBQztFQUNqQztFQUFDLElBQUFKLGFBQUEsQ0FBQUcsT0FBQSxFQUFBRCx1QkFBQTtJQUFBRyxHQUFBO0lBQUFDLEtBQUEsRUFRRCxTQUFBQyxnQkFDRUMsU0FBWSxFQUNaQyxZQUFvRCxFQUNaO01BQ3hDUixTQUFTLENBQ1BRLFlBQVksQ0FBQ0MsVUFBVSxLQUFLLElBQUksRUFDaEMsd0RBQXdELENBQ3pEO01BQ0QsSUFBSSxDQUFDLElBQUksQ0FBQ04scUJBQXFCLENBQUNJLFNBQVMsQ0FBQyxFQUFFO1FBQzFDLElBQUksQ0FBQ0oscUJBQXFCLENBQUNJLFNBQVMsQ0FBQyxHQUFHLEVBQUU7TUFDNUM7TUFDQSxJQUFNSCxHQUFHLEdBQUcsSUFBSSxDQUFDRCxxQkFBcUIsQ0FBQ0ksU0FBUyxDQUFDLENBQUNHLE1BQU07TUFDeEQsSUFBSSxDQUFDUCxxQkFBcUIsQ0FBQ0ksU0FBUyxDQUFDLENBQUNJLElBQUksQ0FBQ0gsWUFBWSxDQUFDO01BQ3hEQSxZQUFZLENBQUNELFNBQVMsR0FBR0EsU0FBUztNQUNsQ0MsWUFBWSxDQUFDSixHQUFHLEdBQUdBLEdBQUc7TUFDdEIsT0FBT0ksWUFBWTtJQUNyQjtFQUFDO0lBQUFKLEdBQUE7SUFBQUMsS0FBQSxFQVFELFNBQUFPLHVCQUFtREwsU0FBYSxFQUFRO01BQ3RFLElBQUlBLFNBQVMsSUFBSSxJQUFJLEVBQUU7UUFDckIsSUFBSSxDQUFDSixxQkFBcUIsR0FBRyxDQUFDLENBQUM7TUFDakMsQ0FBQyxNQUFNO1FBQ0wsT0FBTyxJQUFJLENBQUNBLHFCQUFxQixDQUFDSSxTQUFTLENBQUM7TUFDOUM7SUFDRjtFQUFDO0lBQUFILEdBQUE7SUFBQUMsS0FBQSxFQVFELFNBQUFRLG1CQUNFTCxZQUFvRCxFQUM5QztNQUNOLElBQU1ELFNBQVMsR0FBR0MsWUFBWSxDQUFDRCxTQUFTO01BQ3hDLElBQU1ILEdBQUcsR0FBR0ksWUFBWSxDQUFDSixHQUFHO01BRTVCLElBQU1VLG9CQUFvQixHQUFHLElBQUksQ0FBQ1gscUJBQXFCLENBQUNJLFNBQVMsQ0FBQztNQUNsRSxJQUFJTyxvQkFBb0IsRUFBRTtRQUN4QixPQUFPQSxvQkFBb0IsQ0FBQ1YsR0FBRyxDQUFDO01BQ2xDO0lBQ0Y7RUFBQztJQUFBQSxHQUFBO0lBQUFDLEtBQUEsRUFjRCxTQUFBVSx3QkFDRVIsU0FBWSxFQUNvQztNQUNoRCxPQUFPLElBQUksQ0FBQ0oscUJBQXFCLENBQUNJLFNBQVMsQ0FBQztJQUM5QztFQUFDO0VBQUEsT0FBQU4sdUJBQUE7QUFBQTtBQUdIZSxNQUFNLENBQUNDLE9BQU8sR0FBR2hCLHVCQUF1QiJ9