ba15a6f859423a558ca87f472a070038
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _EventSubscription3 = _interopRequireDefault(require("./_EventSubscription"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var EmitterSubscription = function (_EventSubscription2) {
  (0, _inherits2.default)(EmitterSubscription, _EventSubscription2);
  var _super = _createSuper(EmitterSubscription);
  function EmitterSubscription(emitter, subscriber, listener, context) {
    var _this;
    (0, _classCallCheck2.default)(this, EmitterSubscription);
    _this = _super.call(this, subscriber);
    _this.emitter = emitter;
    _this.listener = listener;
    _this.context = context;
    return _this;
  }
  (0, _createClass2.default)(EmitterSubscription, [{
    key: "remove",
    value: function remove() {
      this.emitter.__removeSubscription(this);
    }
  }]);
  return EmitterSubscription;
}(_EventSubscription3.default);
module.exports = EmitterSubscription;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2luaGVyaXRzMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfRXZlbnRTdWJzY3JpcHRpb24zIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsImRlZmF1bHQiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsImUiLCJFbWl0dGVyU3Vic2NyaXB0aW9uIiwiX0V2ZW50U3Vic2NyaXB0aW9uMiIsIl9zdXBlciIsImVtaXR0ZXIiLCJzdWJzY3JpYmVyIiwibGlzdGVuZXIiLCJjb250ZXh0IiwiX3RoaXMiLCJrZXkiLCJ2YWx1ZSIsInJlbW92ZSIsIl9fcmVtb3ZlU3Vic2NyaXB0aW9uIiwiX0V2ZW50U3Vic2NyaXB0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIl9FbWl0dGVyU3Vic2NyaXB0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIEV2ZW50RW1pdHRlciBmcm9tICcuL0V2ZW50RW1pdHRlcic7XG5pbXBvcnQgX0V2ZW50U3Vic2NyaXB0aW9uIGZyb20gJy4vX0V2ZW50U3Vic2NyaXB0aW9uJztcbmltcG9ydCB0eXBlIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIGZyb20gJy4vX0V2ZW50U3Vic2NyaXB0aW9uVmVuZG9yJztcbmltcG9ydCB7dHlwZSBFdmVudFN1YnNjcmlwdGlvbn0gZnJvbSAnLi9FdmVudFN1YnNjcmlwdGlvbic7XG5cbi8qKlxuICogRW1pdHRlclN1YnNjcmlwdGlvbiByZXByZXNlbnRzIGEgc3Vic2NyaXB0aW9uIHdpdGggbGlzdGVuZXIgYW5kIGNvbnRleHQgZGF0YS5cbiAqL1xuY2xhc3MgRW1pdHRlclN1YnNjcmlwdGlvbjxFdmVudERlZmluaXRpb25zOiB7Li4ufSwgSzogJEtleXM8RXZlbnREZWZpbml0aW9ucz4+XG4gIGV4dGVuZHMgX0V2ZW50U3Vic2NyaXB0aW9uPEV2ZW50RGVmaW5pdGlvbnMsIEs+XG4gIGltcGxlbWVudHMgRXZlbnRTdWJzY3JpcHRpb25cbntcbiAgZW1pdHRlcjogRXZlbnRFbWl0dGVyPEV2ZW50RGVmaW5pdGlvbnM+O1xuICBsaXN0ZW5lcjogPyguLi4kRWxlbWVudFR5cGU8RXZlbnREZWZpbml0aW9ucywgSz4pID0+IG1peGVkO1xuICBjb250ZXh0OiA/JEZsb3dGaXhNZTtcblxuICAvKipcbiAgICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IGVtaXR0ZXIgLSBUaGUgZXZlbnQgZW1pdHRlciB0aGF0IHJlZ2lzdGVyZWQgdGhpc1xuICAgKiAgIHN1YnNjcmlwdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50U3Vic2NyaXB0aW9uVmVuZG9yfSBzdWJzY3JpYmVyIC0gVGhlIHN1YnNjcmliZXIgdGhhdCBjb250cm9sc1xuICAgKiAgIHRoaXMgc3Vic2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGxpc3RlbmVyIC0gRnVuY3Rpb24gdG8gaW52b2tlIHdoZW4gdGhlIHNwZWNpZmllZCBldmVudCBpc1xuICAgKiAgIGVtaXR0ZWRcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0IC0gT3B0aW9uYWwgY29udGV4dCBvYmplY3QgdG8gdXNlIHdoZW4gaW52b2tpbmcgdGhlXG4gICAqICAgbGlzdGVuZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxFdmVudERlZmluaXRpb25zPixcbiAgICBzdWJzY3JpYmVyOiBFdmVudFN1YnNjcmlwdGlvblZlbmRvcjxFdmVudERlZmluaXRpb25zPixcbiAgICBsaXN0ZW5lcjogKC4uLiRFbGVtZW50VHlwZTxFdmVudERlZmluaXRpb25zLCBLPikgPT4gbWl4ZWQsXG4gICAgY29udGV4dDogPyRGbG93Rml4TWUsXG4gICkge1xuICAgIHN1cGVyKHN1YnNjcmliZXIpO1xuICAgIHRoaXMuZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGlzIHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBlbWl0dGVyIHRoYXQgcmVnaXN0ZXJlZCBpdC5cbiAgICogTm90ZTogd2UncmUgb3ZlcnJpZGluZyB0aGUgYHJlbW92ZSgpYCBtZXRob2Qgb2YgX0V2ZW50U3Vic2NyaXB0aW9uIGhlcmVcbiAgICogYnV0IGRlbGliZXJhdGVseSBub3QgY2FsbGluZyBgc3VwZXIucmVtb3ZlKClgIGFzIHRoZSByZXNwb25zaWJpbGl0eVxuICAgKiBmb3IgcmVtb3ZpbmcgdGhlIHN1YnNjcmlwdGlvbiBsaWVzIHdpdGggdGhlIEV2ZW50RW1pdHRlci5cbiAgICovXG4gIHJlbW92ZSgpOiB2b2lkIHtcbiAgICB0aGlzLmVtaXR0ZXIuX19yZW1vdmVTdWJzY3JpcHRpb24odGhpcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyU3Vic2NyaXB0aW9uO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUcsVUFBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUksMkJBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLGdCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFHYixJQUFBTSxtQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQXNELFNBQUFPLGFBQUFDLE9BQUEsUUFBQUMseUJBQUEsR0FBQUMseUJBQUEsb0JBQUFDLHFCQUFBLFFBQUFDLEtBQUEsT0FBQVAsZ0JBQUEsQ0FBQVEsT0FBQSxFQUFBTCxPQUFBLEdBQUFNLE1BQUEsTUFBQUwseUJBQUEsUUFBQU0sU0FBQSxPQUFBVixnQkFBQSxDQUFBUSxPQUFBLFFBQUFHLFdBQUEsRUFBQUYsTUFBQSxHQUFBRyxPQUFBLENBQUFDLFNBQUEsQ0FBQU4sS0FBQSxFQUFBTyxTQUFBLEVBQUFKLFNBQUEsWUFBQUQsTUFBQSxHQUFBRixLQUFBLENBQUFRLEtBQUEsT0FBQUQsU0FBQSxnQkFBQWYsMkJBQUEsQ0FBQVMsT0FBQSxRQUFBQyxNQUFBO0FBQUEsU0FBQUosMEJBQUEsZUFBQU8sT0FBQSxxQkFBQUEsT0FBQSxDQUFBQyxTQUFBLG9CQUFBRCxPQUFBLENBQUFDLFNBQUEsQ0FBQUcsSUFBQSwyQkFBQUMsS0FBQSxvQ0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFDLE9BQUEsQ0FBQUMsSUFBQSxDQUFBVCxPQUFBLENBQUFDLFNBQUEsQ0FBQUssT0FBQSw4Q0FBQUksQ0FBQTtBQUFBLElBT2hEQyxtQkFBbUIsYUFBQUMsbUJBQUE7RUFBQSxJQUFBMUIsVUFBQSxDQUFBVSxPQUFBLEVBQUFlLG1CQUFBLEVBQUFDLG1CQUFBO0VBQUEsSUFBQUMsTUFBQSxHQUFBdkIsWUFBQSxDQUFBcUIsbUJBQUE7RUFrQnZCLFNBQUFBLG9CQUNFRyxPQUF1QyxFQUN2Q0MsVUFBcUQsRUFDckRDLFFBQXlELEVBQ3pEQyxPQUFvQixFQUNwQjtJQUFBLElBQUFDLEtBQUE7SUFBQSxJQUFBbEMsZ0JBQUEsQ0FBQVksT0FBQSxRQUFBZSxtQkFBQTtJQUNBTyxLQUFBLEdBQUFMLE1BQUEsQ0FBQUosSUFBQSxPQUFNTSxVQUFVO0lBQ2hCRyxLQUFBLENBQUtKLE9BQU8sR0FBR0EsT0FBTztJQUN0QkksS0FBQSxDQUFLRixRQUFRLEdBQUdBLFFBQVE7SUFDeEJFLEtBQUEsQ0FBS0QsT0FBTyxHQUFHQSxPQUFPO0lBQUMsT0FBQUMsS0FBQTtFQUN6QjtFQUFDLElBQUFqQyxhQUFBLENBQUFXLE9BQUEsRUFBQWUsbUJBQUE7SUFBQVEsR0FBQTtJQUFBQyxLQUFBLEVBUUQsU0FBQUMsT0FBQSxFQUFlO01BQ2IsSUFBSSxDQUFDUCxPQUFPLENBQUNRLG9CQUFvQixDQUFDLElBQUksQ0FBQztJQUN6QztFQUFDO0VBQUEsT0FBQVgsbUJBQUE7QUFBQSxFQXJDT1ksMkJBQWtCO0FBd0M1QkMsTUFBTSxDQUFDQyxPQUFPLEdBQUdkLG1CQUFtQiJ9