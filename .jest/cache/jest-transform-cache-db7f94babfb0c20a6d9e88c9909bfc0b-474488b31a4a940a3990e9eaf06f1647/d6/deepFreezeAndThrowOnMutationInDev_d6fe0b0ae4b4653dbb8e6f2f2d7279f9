e4f405c3954273faa37e4fa7f886ed3d
'use strict';
function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return object;
    }
    var keys = Object.keys(object);
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (_hasOwnProperty.call(object, key)) {
        Object.defineProperty(object, key, {
          get: identity.bind(null, object[key])
        });
        Object.defineProperty(object, key, {
          set: throwOnImmutableMutation.bind(null, key)
        });
      }
    }
    Object.freeze(object);
    Object.seal(object);
    for (var _i = 0; _i < keys.length; _i++) {
      var _key = keys[_i];
      if (_hasOwnProperty.call(object, _key)) {
        deepFreezeAndThrowOnMutationInDev(object[_key]);
      }
    }
  }
  return object;
}
function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}
function identity(value) {
  return value;
}
module.exports = deepFreezeAndThrowOnMutationInDev;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJvYmplY3QiLCJfX0RFVl9fIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJpc1NlYWxlZCIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJrZXkiLCJjYWxsIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJpZGVudGl0eSIsImJpbmQiLCJzZXQiLCJ0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24iLCJmcmVlemUiLCJzZWFsIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSWYgeW91ciBhcHBsaWNhdGlvbiBpcyBhY2NlcHRpbmcgZGlmZmVyZW50IHZhbHVlcyBmb3IgdGhlIHNhbWUgZmllbGQgb3ZlclxuICogdGltZSBhbmQgaXMgZG9pbmcgYSBkaWZmIG9uIHRoZW0sIHlvdSBjYW4gZWl0aGVyICgxKSBjcmVhdGUgYSBjb3B5IG9yXG4gKiAoMikgZW5zdXJlIHRoYXQgdGhvc2UgdmFsdWVzIGFyZSBub3QgbXV0YXRlZCBiZWhpbmQgdHdvIHBhc3Nlcy5cbiAqIFRoaXMgZnVuY3Rpb24gaGVscHMgeW91IHdpdGggKDIpIGJ5IGZyZWV6aW5nIHRoZSBvYmplY3QgYW5kIHRocm93aW5nIGlmXG4gKiB0aGUgdXNlciBzdWJzZXF1ZW50bHkgbW9kaWZpZXMgdGhlIHZhbHVlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gY2F2ZWF0cyB3aXRoIHRoaXMgZnVuY3Rpb246XG4gKiAgIC0gSWYgdGhlIGNhbGwgc2l0ZSBpcyBub3QgaW4gc3RyaWN0IG1vZGUsIGl0IHdpbGwgb25seSB0aHJvdyB3aGVuXG4gKiAgICAgbXV0YXRpbmcgZXhpc3RpbmcgZmllbGRzLCBhZGRpbmcgYSBuZXcgb25lXG4gKiAgICAgd2lsbCB1bmZvcnR1bmF0ZWx5IGZhaWwgc2lsZW50bHkgOihcbiAqICAgLSBJZiB0aGUgb2JqZWN0IGlzIGFscmVhZHkgZnJvemVuIG9yIHNlYWxlZCwgaXQgd2lsbCBub3QgY29udGludWUgdGhlXG4gKiAgICAgZGVlcCB0cmF2ZXJzYWwgYW5kIHdpbGwgbGVhdmUgbGVhZiBub2RlcyB1bmZyb3plbi5cbiAqXG4gKiBGcmVlemluZyB0aGUgb2JqZWN0IGFuZCBhZGRpbmcgdGhlIHRocm93IG1lY2hhbmlzbSBpcyBleHBlbnNpdmUgYW5kIHdpbGxcbiAqIG9ubHkgYmUgdXNlZCBpbiBERVYuXG4gKi9cbmZ1bmN0aW9uIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjxUOiB7Li4ufSB8IEFycmF5PG1peGVkPj4oXG4gIG9iamVjdDogVCxcbik6IFQge1xuICBpZiAoX19ERVZfXykge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnIHx8XG4gICAgICBvYmplY3QgPT09IG51bGwgfHxcbiAgICAgIE9iamVjdC5pc0Zyb3plbihvYmplY3QpIHx8XG4gICAgICBPYmplY3QuaXNTZWFsZWQob2JqZWN0KVxuICAgICkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvLyAkRmxvd0ZpeE1lW25vdC1hbi1vYmplY3RdIGBvYmplY3RgIGNhbiBiZSBhbiBhcnJheSwgYnV0IE9iamVjdC5rZXlzIHdvcmtzIHdpdGggYXJyYXlzIHRvb1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cygob2JqZWN0OiB7Li4ufSB8IEFycmF5PG1peGVkPikpO1xuICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvciB0aGlzIHBhcmFtZXRlcnNcbiAgICBjb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgZ2V0OiBpZGVudGl0eS5iaW5kKG51bGwsIG9iamVjdFtrZXldKSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgIHNldDogdGhyb3dPbkltbXV0YWJsZU11dGF0aW9uLmJpbmQobnVsbCwga2V5KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmZyZWV6ZShvYmplY3QpO1xuICAgIE9iamVjdC5zZWFsKG9iamVjdCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2KG9iamVjdFtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkltbXV0YWJsZU11dGF0aW9uKGtleTogZW1wdHksIHZhbHVlKSB7XG4gIHRocm93IEVycm9yKFxuICAgICdZb3UgYXR0ZW1wdGVkIHRvIHNldCB0aGUga2V5IGAnICtcbiAgICAgIGtleSArXG4gICAgICAnYCB3aXRoIHRoZSB2YWx1ZSBgJyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgK1xuICAgICAgJ2Agb24gYW4gb2JqZWN0IHRoYXQgaXMgbWVhbnQgdG8gYmUgaW1tdXRhYmxlICcgK1xuICAgICAgJ2FuZCBoYXMgYmVlbiBmcm96ZW4uJyxcbiAgKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWU6IG1peGVkKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXY7XG4iXSwibWFwcGluZ3MiOiJBQVVBLFlBQVk7QUFtQlosU0FBU0EsaUNBQWlDQSxDQUN4Q0MsTUFBUyxFQUNOO0VBQ0gsSUFBSUMsT0FBTyxFQUFFO0lBQ1gsSUFDRSxPQUFPRCxNQUFNLEtBQUssUUFBUSxJQUMxQkEsTUFBTSxLQUFLLElBQUksSUFDZkUsTUFBTSxDQUFDQyxRQUFRLENBQUNILE1BQU0sQ0FBQyxJQUN2QkUsTUFBTSxDQUFDRSxRQUFRLENBQUNKLE1BQU0sQ0FBQyxFQUN2QjtNQUNBLE9BQU9BLE1BQU07SUFDZjtJQUdBLElBQU1LLElBQUksR0FBR0gsTUFBTSxDQUFDRyxJQUFJLENBQUVMLE1BQU0sQ0FBd0I7SUFFeEQsSUFBTU0sZUFBYyxHQUFHSixNQUFNLENBQUNLLFNBQVMsQ0FBQ0QsY0FBYztJQUV0RCxLQUFLLElBQUlFLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0gsSUFBSSxDQUFDSSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO01BQ3BDLElBQU1FLEdBQUcsR0FBR0wsSUFBSSxDQUFDRyxDQUFDLENBQUM7TUFDbkIsSUFBSUYsZUFBYyxDQUFDSyxJQUFJLENBQUNYLE1BQU0sRUFBRVUsR0FBRyxDQUFDLEVBQUU7UUFDcENSLE1BQU0sQ0FBQ1UsY0FBYyxDQUFDWixNQUFNLEVBQUVVLEdBQUcsRUFBRTtVQUNqQ0csR0FBRyxFQUFFQyxRQUFRLENBQUNDLElBQUksQ0FBQyxJQUFJLEVBQUVmLE1BQU0sQ0FBQ1UsR0FBRyxDQUFDO1FBQ3RDLENBQUMsQ0FBQztRQUNGUixNQUFNLENBQUNVLGNBQWMsQ0FBQ1osTUFBTSxFQUFFVSxHQUFHLEVBQUU7VUFDakNNLEdBQUcsRUFBRUMsd0JBQXdCLENBQUNGLElBQUksQ0FBQyxJQUFJLEVBQUVMLEdBQUc7UUFDOUMsQ0FBQyxDQUFDO01BQ0o7SUFDRjtJQUVBUixNQUFNLENBQUNnQixNQUFNLENBQUNsQixNQUFNLENBQUM7SUFDckJFLE1BQU0sQ0FBQ2lCLElBQUksQ0FBQ25CLE1BQU0sQ0FBQztJQUVuQixLQUFLLElBQUlRLEVBQUMsR0FBRyxDQUFDLEVBQUVBLEVBQUMsR0FBR0gsSUFBSSxDQUFDSSxNQUFNLEVBQUVELEVBQUMsRUFBRSxFQUFFO01BQ3BDLElBQU1FLElBQUcsR0FBR0wsSUFBSSxDQUFDRyxFQUFDLENBQUM7TUFDbkIsSUFBSUYsZUFBYyxDQUFDSyxJQUFJLENBQUNYLE1BQU0sRUFBRVUsSUFBRyxDQUFDLEVBQUU7UUFDcENYLGlDQUFpQyxDQUFDQyxNQUFNLENBQUNVLElBQUcsQ0FBQyxDQUFDO01BQ2hEO0lBQ0Y7RUFDRjtFQUNBLE9BQU9WLE1BQU07QUFDZjtBQUVBLFNBQVNpQix3QkFBd0JBLENBQUNQLEdBQVUsRUFBRVUsS0FBSyxFQUFFO0VBQ25ELE1BQU1DLEtBQUssQ0FDVCxnQ0FBZ0MsR0FDOUJYLEdBQUcsR0FDSCxvQkFBb0IsR0FDcEJZLElBQUksQ0FBQ0MsU0FBUyxDQUFDSCxLQUFLLENBQUMsR0FDckIsK0NBQStDLEdBQy9DLHNCQUFzQixDQUN6QjtBQUNIO0FBRUEsU0FBU04sUUFBUUEsQ0FBQ00sS0FBWSxFQUFFO0VBQzlCLE9BQU9BLEtBQUs7QUFDZDtBQUVBSSxNQUFNLENBQUNDLE9BQU8sR0FBRzFCLGlDQUFpQyJ9