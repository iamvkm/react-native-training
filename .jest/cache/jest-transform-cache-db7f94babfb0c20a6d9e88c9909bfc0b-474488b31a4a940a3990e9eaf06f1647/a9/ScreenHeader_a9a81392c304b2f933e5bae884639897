da8df0a3ecef97400a22485140d270da
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _global = _interopRequireDefault(require("../../constants/global.urls"));
var _ScreenHeader = _interopRequireDefault(require("./ScreenHeader.styles"));
var _jsxRuntime = require("react/jsx-runtime");
function cov_9t6ktf9ql() {
  var path = "D:\\NativeApp\\src\\components\\ScreenHeader\\ScreenHeader.tsx";
  var hash = "e389e7699857e157437cac7a82c09149c1b455de";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\NativeApp\\src\\components\\ScreenHeader\\ScreenHeader.tsx",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 33,
          column: 1
        }
      },
      "1": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 32,
          column: 4
        }
      },
      "2": {
        start: {
          line: 24,
          column: 23
        },
        end: {
          line: 24,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 11,
            column: 21
          },
          end: {
            line: 11,
            column: 22
          }
        },
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 24,
            column: 17
          },
          end: {
            line: 24,
            column: 18
          }
        },
        loc: {
          start: {
            line: 24,
            column: 23
          },
          end: {
            line: 24,
            column: 42
          }
        },
        line: 24
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 14,
            column: 2
          },
          end: {
            line: 14,
            column: 18
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 14,
            column: 13
          },
          end: {
            line: 14,
            column: 18
          }
        }],
        line: 14
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 19
          },
          end: {
            line: 20,
            column: 35
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 20,
            column: 30
          },
          end: {
            line: 20,
            column: 31
          }
        }, {
          start: {
            line: 20,
            column: 34
          },
          end: {
            line: 20,
            column: 35
          }
        }],
        line: 20
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e389e7699857e157437cac7a82c09149c1b455de"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_9t6ktf9ql = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_9t6ktf9ql();
cov_9t6ktf9ql().s[0]++;
var ScreenHeader = function ScreenHeader(_ref) {
  var title = _ref.title,
    navigation = _ref.navigation,
    _ref$elevated = _ref.elevated,
    elevated = _ref$elevated === void 0 ? (cov_9t6ktf9ql().b[0][0]++, false) : _ref$elevated;
  cov_9t6ktf9ql().f[0]++;
  cov_9t6ktf9ql().s[1]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: Object.assign({}, _ScreenHeader.default.rootContainer, {
      elevation: elevated ? (cov_9t6ktf9ql().b[1][0]++, 2) : (cov_9t6ktf9ql().b[1][1]++, 0)
    }),
    children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: _ScreenHeader.default.backIcon,
      onPress: function onPress() {
        cov_9t6ktf9ql().f[1]++;
        cov_9t6ktf9ql().s[2]++;
        return navigation.goBack();
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
        style: _ScreenHeader.default.iconSize,
        source: {
          uri: _global.default.screenHeader.backIcon
        }
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: _ScreenHeader.default.headerTitle,
      children: title
    })]
  });
};
var _default = ScreenHeader;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9nbG9iYWwiLCJfU2NyZWVuSGVhZGVyIiwiX2pzeFJ1bnRpbWUiLCJjb3ZfOXQ2a3RmOXFsIiwicGF0aCIsImhhc2giLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdjdiIsImNvdmVyYWdlRGF0YSIsInN0YXRlbWVudE1hcCIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsImVuZCIsImZuTWFwIiwibmFtZSIsImRlY2wiLCJsb2MiLCJicmFuY2hNYXAiLCJ0eXBlIiwibG9jYXRpb25zIiwicyIsImYiLCJiIiwiX2NvdmVyYWdlU2NoZW1hIiwiY292ZXJhZ2UiLCJhY3R1YWxDb3ZlcmFnZSIsIlNjcmVlbkhlYWRlciIsIl9yZWYiLCJ0aXRsZSIsIm5hdmlnYXRpb24iLCJfcmVmJGVsZXZhdGVkIiwiZWxldmF0ZWQiLCJqc3hzIiwiVmlldyIsInN0eWxlIiwiT2JqZWN0IiwiYXNzaWduIiwic2NyZWVuSGVhZGVyU3R5bGVzIiwicm9vdENvbnRhaW5lciIsImVsZXZhdGlvbiIsImNoaWxkcmVuIiwianN4IiwiVG91Y2hhYmxlT3BhY2l0eSIsImJhY2tJY29uIiwib25QcmVzcyIsImdvQmFjayIsIkltYWdlIiwiaWNvblNpemUiLCJzb3VyY2UiLCJ1cmkiLCJsb2NhbFVybHMiLCJzY3JlZW5IZWFkZXIiLCJUZXh0IiwiaGVhZGVyVGl0bGUiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiU2NyZWVuSGVhZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtJbWFnZSwgVGV4dCwgVG91Y2hhYmxlT3BhY2l0eSwgVmlld30gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IGxvY2FsVXJscyBmcm9tICcuLi8uLi9jb25zdGFudHMvZ2xvYmFsLnVybHMnO1xuaW1wb3J0IHNjcmVlbkhlYWRlclN0eWxlcyBmcm9tICcuL1NjcmVlbkhlYWRlci5zdHlsZXMnO1xuXG4vKipcbiAqIFNjcmVlbkhlYWRlciBjb21wb25lbnRcbiAqIEByZXR1cm5zIHtKU1guRWxlbWVudH1cbiAqL1xuY29uc3QgU2NyZWVuSGVhZGVyID0gKHtcbiAgdGl0bGUsXG4gIG5hdmlnYXRpb24sXG4gIGVsZXZhdGVkID0gZmFsc2UsXG59OiBhbnkpOiBKU1guRWxlbWVudCA9PiB7XG4gIHJldHVybiAoXG4gICAgPFZpZXdcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIC4uLnNjcmVlbkhlYWRlclN0eWxlcy5yb290Q29udGFpbmVyLFxuICAgICAgICBlbGV2YXRpb246IGVsZXZhdGVkID8gMiA6IDAsXG4gICAgICB9fT5cbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgIHN0eWxlPXtzY3JlZW5IZWFkZXJTdHlsZXMuYmFja0ljb259XG4gICAgICAgIG9uUHJlc3M9eygpID0+IG5hdmlnYXRpb24uZ29CYWNrKCl9PlxuICAgICAgICA8SW1hZ2VcbiAgICAgICAgICBzdHlsZT17c2NyZWVuSGVhZGVyU3R5bGVzLmljb25TaXplfVxuICAgICAgICAgIHNvdXJjZT17e3VyaTogbG9jYWxVcmxzLnNjcmVlbkhlYWRlci5iYWNrSWNvbn19XG4gICAgICAgIC8+XG4gICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICA8VGV4dCBzdHlsZT17c2NyZWVuSGVhZGVyU3R5bGVzLmhlYWRlclRpdGxlfT57dGl0bGV9PC9UZXh0PlxuICAgIDwvVmlldz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNjcmVlbkhlYWRlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxPQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFBdUQsSUFBQUksV0FBQSxHQUFBSixPQUFBO0FBQUEsU0FBQUssY0FBQTtFQUFBLElBQUFDLElBQUE7RUFBQSxJQUFBQyxJQUFBO0VBQUEsSUFBQUMsTUFBQSxPQUFBQyxRQUFBO0VBQUEsSUFBQUMsR0FBQTtFQUFBLElBQUFDLFlBQUE7SUFBQUwsSUFBQTtJQUFBTSxZQUFBO01BQUE7UUFBQUMsS0FBQTtVQUFBQyxJQUFBO1VBQUFDLE1BQUE7UUFBQTtRQUFBQyxHQUFBO1VBQUFGLElBQUE7VUFBQUMsTUFBQTtRQUFBO01BQUE7TUFBQTtRQUFBRixLQUFBO1VBQUFDLElBQUE7VUFBQUMsTUFBQTtRQUFBO1FBQUFDLEdBQUE7VUFBQUYsSUFBQTtVQUFBQyxNQUFBO1FBQUE7TUFBQTtNQUFBO1FBQUFGLEtBQUE7VUFBQUMsSUFBQTtVQUFBQyxNQUFBO1FBQUE7UUFBQUMsR0FBQTtVQUFBRixJQUFBO1VBQUFDLE1BQUE7UUFBQTtNQUFBO0lBQUE7SUFBQUUsS0FBQTtNQUFBO1FBQUFDLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtNQUFBO1FBQUFJLElBQUE7UUFBQUMsSUFBQTtVQUFBTixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBSyxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFELElBQUE7TUFBQTtJQUFBO0lBQUFPLFNBQUE7TUFBQTtRQUFBRCxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7TUFBQTtRQUFBTSxHQUFBO1VBQUFQLEtBQUE7WUFBQUMsSUFBQTtZQUFBQyxNQUFBO1VBQUE7VUFBQUMsR0FBQTtZQUFBRixJQUFBO1lBQUFDLE1BQUE7VUFBQTtRQUFBO1FBQUFPLElBQUE7UUFBQUMsU0FBQTtVQUFBVixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtVQUFBRixLQUFBO1lBQUFDLElBQUE7WUFBQUMsTUFBQTtVQUFBO1VBQUFDLEdBQUE7WUFBQUYsSUFBQTtZQUFBQyxNQUFBO1VBQUE7UUFBQTtRQUFBRCxJQUFBO01BQUE7SUFBQTtJQUFBVSxDQUFBO01BQUE7TUFBQTtNQUFBO0lBQUE7SUFBQUMsQ0FBQTtNQUFBO01BQUE7SUFBQTtJQUFBQyxDQUFBO01BQUE7TUFBQTtJQUFBO0lBQUFDLGVBQUE7SUFBQXBCLElBQUE7RUFBQTtFQUFBLElBQUFxQixRQUFBLEdBQUFwQixNQUFBLENBQUFFLEdBQUEsTUFBQUYsTUFBQSxDQUFBRSxHQUFBO0VBQUEsS0FBQWtCLFFBQUEsQ0FBQXRCLElBQUEsS0FBQXNCLFFBQUEsQ0FBQXRCLElBQUEsRUFBQUMsSUFBQSxLQUFBQSxJQUFBO0lBQUFxQixRQUFBLENBQUF0QixJQUFBLElBQUFLLFlBQUE7RUFBQTtFQUFBLElBQUFrQixjQUFBLEdBQUFELFFBQUEsQ0FBQXRCLElBQUE7RUFBQTtJQUFBRCxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBd0IsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQXhCLGFBQUE7QUFBQUEsYUFBQSxHQUFBbUIsQ0FBQTtBQU12RCxJQUFNTSxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBQUMsSUFBQSxFQUlNO0VBQUEsSUFIdEJDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO0lBQ0xDLFVBQVUsR0FBQUYsSUFBQSxDQUFWRSxVQUFVO0lBQUFDLGFBQUEsR0FBQUgsSUFBQSxDQUNWSSxRQUFRO0lBQVJBLFFBQVEsR0FBQUQsYUFBQSxlQUFBN0IsYUFBQSxHQUFBcUIsQ0FBQSxVQUFHLEtBQUssSUFBQVEsYUFBQTtFQUFBN0IsYUFBQSxHQUFBb0IsQ0FBQTtFQUFBcEIsYUFBQSxHQUFBbUIsQ0FBQTtFQUVoQixPQUNFLElBQUFwQixXQUFBLENBQUFnQyxJQUFBLEVBQUNuQyxZQUFBLENBQUFvQyxJQUFJO0lBQ0hDLEtBQUssRUFBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0FDLHFCQUFrQixDQUFDQyxhQUFhO01BQ25DQyxTQUFTLEVBQUVSLFFBQVEsSUFBQTlCLGFBQUEsR0FBQXFCLENBQUEsVUFBRyxDQUFDLEtBQUFyQixhQUFBLEdBQUFxQixDQUFBLFVBQUcsQ0FBQztJQUFBLEVBQzNCO0lBQUFrQixRQUFBLEdBQ0YsSUFBQXhDLFdBQUEsQ0FBQXlDLEdBQUEsRUFBQzVDLFlBQUEsQ0FBQTZDLGdCQUFnQjtNQUNmUixLQUFLLEVBQUVHLHFCQUFrQixDQUFDTSxRQUFTO01BQ25DQyxPQUFPLEVBQUUsU0FBQUEsUUFBQSxFQUFNO1FBQUEzQyxhQUFBLEdBQUFvQixDQUFBO1FBQUFwQixhQUFBLEdBQUFtQixDQUFBO1FBQUEsT0FBQVMsVUFBVSxDQUFDZ0IsTUFBTSxFQUFFO01BQUQsQ0FBRTtNQUFBTCxRQUFBLEVBQ25DLElBQUF4QyxXQUFBLENBQUF5QyxHQUFBLEVBQUM1QyxZQUFBLENBQUFpRCxLQUFLO1FBQ0paLEtBQUssRUFBRUcscUJBQWtCLENBQUNVLFFBQVM7UUFDbkNDLE1BQU0sRUFBRTtVQUFDQyxHQUFHLEVBQUVDLGVBQVMsQ0FBQ0MsWUFBWSxDQUFDUjtRQUFRO01BQUU7SUFDL0MsRUFDZSxFQUNuQixJQUFBM0MsV0FBQSxDQUFBeUMsR0FBQSxFQUFDNUMsWUFBQSxDQUFBdUQsSUFBSTtNQUFDbEIsS0FBSyxFQUFFRyxxQkFBa0IsQ0FBQ2dCLFdBQVk7TUFBQWIsUUFBQSxFQUFFWjtJQUFLLEVBQVE7RUFBQSxFQUN0RDtBQUVYLENBQUM7QUFBQyxJQUFBMEIsUUFBQSxHQUVhNUIsWUFBWTtBQUFBNkIsT0FBQSxDQUFBQyxPQUFBLEdBQUFGLFFBQUEifQ==